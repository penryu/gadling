/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **almanac**
   * - Table in database
   */
  export namespace almanac {
    export type Table = 'almanac';
    export interface Selectable {
      /**
      * **almanac.id**
      * - `int4` in database
      * - Generated column
      */
    id: number;
      /**
      * **almanac.recipient**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    recipient: string;
      /**
      * **almanac.served_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    served_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **almanac.id**
      * - `int4` in database
      * - Generated column
      */
    id: number;
      /**
      * **almanac.recipient**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    recipient: string;
      /**
      * **almanac.served_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    served_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **almanac.id**
      * - `int4` in database
      * - Generated column
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **almanac.recipient**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    recipient?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **almanac.served_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    served_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **almanac.recipient**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    recipient: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **almanac.served_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    served_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **almanac.recipient**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    recipient?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **almanac.served_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    served_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'almanac_pkey' | 'almanac_recipient_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **facts**
   * - Table in database
   */
  export namespace facts {
    export type Table = 'facts';
    export interface Selectable {
      /**
      * **facts.id**
      * - `int4` in database
      * - Generated column
      */
    id: number;
      /**
      * **facts.thing**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    thing: string;
      /**
      * **facts.fact**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    fact: string;
      /**
      * **facts.inactive**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
    inactive: boolean;
    }
    export interface JSONSelectable {
      /**
      * **facts.id**
      * - `int4` in database
      * - Generated column
      */
    id: number;
      /**
      * **facts.thing**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    thing: string;
      /**
      * **facts.fact**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    fact: string;
      /**
      * **facts.inactive**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
    inactive: boolean;
    }
    export interface Whereable {
      /**
      * **facts.id**
      * - `int4` in database
      * - Generated column
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **facts.thing**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    thing?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **facts.fact**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    fact?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **facts.inactive**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
    inactive?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **facts.thing**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    thing: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **facts.fact**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    fact: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **facts.inactive**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
    inactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **facts.thing**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    thing?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **facts.fact**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    fact?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **facts.inactive**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
    inactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'facts_pkey' | 'facts_thing_fact_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **karma**
   * - Table in database
   */
  export namespace karma {
    export type Table = 'karma';
    export interface Selectable {
      /**
      * **karma.id**
      * - `int4` in database
      * - Generated column
      */
    id: number;
      /**
      * **karma.thing**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    thing: string;
      /**
      * **karma.value**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    value: number;
    }
    export interface JSONSelectable {
      /**
      * **karma.id**
      * - `int4` in database
      * - Generated column
      */
    id: number;
      /**
      * **karma.thing**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    thing: string;
      /**
      * **karma.value**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    value: number;
    }
    export interface Whereable {
      /**
      * **karma.id**
      * - `int4` in database
      * - Generated column
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **karma.thing**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    thing?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **karma.value**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    value?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **karma.thing**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    thing: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **karma.value**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    value?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **karma.thing**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
    thing?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **karma.value**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    value?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'karma_pkey' | 'karma_thing_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **schema_migrations**
   * - Table in database
   */
  export namespace schema_migrations {
    export type Table = 'schema_migrations';
    export interface Selectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    version: string;
    }
    export interface JSONSelectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    version: string;
    }
    export interface Whereable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'schema_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = almanac.Table | facts.Table | karma.Table | schema_migrations.Table;
    export type Selectable = almanac.Selectable | facts.Selectable | karma.Selectable | schema_migrations.Selectable;
    export type JSONSelectable = almanac.JSONSelectable | facts.JSONSelectable | karma.JSONSelectable | schema_migrations.JSONSelectable;
    export type Whereable = almanac.Whereable | facts.Whereable | karma.Whereable | schema_migrations.Whereable;
    export type Insertable = almanac.Insertable | facts.Insertable | karma.Insertable | schema_migrations.Insertable;
    export type Updatable = almanac.Updatable | facts.Updatable | karma.Updatable | schema_migrations.Updatable;
    export type UniqueIndex = almanac.UniqueIndex | facts.UniqueIndex | karma.UniqueIndex | schema_migrations.UniqueIndex;
    export type Column = almanac.Column | facts.Column | karma.Column | schema_migrations.Column;
  
    export type AllBaseTables = [almanac.Table, facts.Table, karma.Table, schema_migrations.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [almanac.Table, facts.Table, karma.Table, schema_migrations.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "almanac": almanac.Selectable;
    "facts": facts.Selectable;
    "karma": karma.Selectable;
    "schema_migrations": schema_migrations.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "almanac": almanac.JSONSelectable;
    "facts": facts.JSONSelectable;
    "karma": karma.JSONSelectable;
    "schema_migrations": schema_migrations.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "almanac": almanac.Whereable;
    "facts": facts.Whereable;
    "karma": karma.Whereable;
    "schema_migrations": schema_migrations.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "almanac": almanac.Insertable;
    "facts": facts.Insertable;
    "karma": karma.Insertable;
    "schema_migrations": schema_migrations.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "almanac": almanac.Updatable;
    "facts": facts.Updatable;
    "karma": karma.Updatable;
    "schema_migrations": schema_migrations.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "almanac": almanac.UniqueIndex;
    "facts": facts.UniqueIndex;
    "karma": karma.UniqueIndex;
    "schema_migrations": schema_migrations.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "almanac": almanac.Column;
    "facts": facts.Column;
    "karma": karma.Column;
    "schema_migrations": schema_migrations.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "almanac": almanac.SQL;
    "facts": facts.SQL;
    "karma": karma.SQL;
    "schema_migrations": schema_migrations.SQL;
  }[T];

}
